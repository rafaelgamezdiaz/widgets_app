import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:widgets_app/config/theme/app_theme.dart';

part 'theme_provider.g.dart';

bool isDarkMode = false;

int selectedColor = 0;

// The next class is a provider that will be used to change the theme of the app Dark or Light
// actually the use of this class is commented in the code because the final implementation use
// the ThemeNotifier class (themeNotifierProvider is generated by the command flutter pub run build_runner build)
@riverpod
class WidgetAppTheme extends _$WidgetAppTheme {
  @override
  bool build() => isDarkMode;

  void changeTheme() {
    state = !state;
  }
}

@riverpod
List<Color> colorList(Ref ref) {
  return appColorList;
}

@riverpod
class SelectedColorNotifier extends _$SelectedColorNotifier {
  @override
  int build() => selectedColor;

  void changeSelectedColor(value) {
    state = value;
  }
}

// The next class is a provider that will be used to change the theme of the app Dark or Light and the color of the app
@riverpod
class ThemeNotifier extends _$ThemeNotifier {
  @override
  AppTheme build() => AppTheme(); // state va a ser una instancia de Apptheme

  void toggleDarkMode() {
    state = state.copyWith(
      brightness:
          state.brightness == Brightness.dark
              ? Brightness.light
              : Brightness.dark,
    );
  }

  void changeAppSelectedColor(value) {
    state = state.copyWith(selectedColor: value);
  }
}
